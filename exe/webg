#!/usr/bin/env ruby

require "optparse"
require "uri"

require "nokogiri"

require "webg/version"

module Squeezable
  def squeezed_text(document)
    return text(document).each_line.map { |l|
      l.gsub(/\p{Space}+/, " ").strip
    }.join("\n").strip.gsub(/\n{3,}/, "\n\n")
  end
end

module Fetcher
end

class Fetcher::Raw
  DEFAULT_USER_AGENT = "webg/#{Webg::VERSION}"

  def initialize(headers)
    @headers = headers
  end

  def call(uri)
    require("open-uri")
    return uri.read({"User-Agent" => DEFAULT_USER_AGENT}.merge(@headers))
  end
end

class Fetcher::Firefox
  def initialize(headers)
    return if headers.empty?
    raise "specifying headers on Firefox is not supported"
  end

  def call(uri)
    require("capybara")
    session = Capybara::Session.new(:selenium_headless)
    session.visit(uri)
    return session.body
  end
end

module Selector
end

class Selector::All
  include Squeezable

  REJECT_TAG_NAMES = %w[script noscript style]

  def raw(document)
    return document.to_s
  end

  def text(document)
    document.css(REJECT_TAG_NAMES.join(", ")).remove
    return document.inner_text
  end
end

class Selector::Css
  include Squeezable

  def initialize(css_selectors)
    @css_selectors = css_selectors
  end

  def raw(document)
    return process(document, :to_s)
  end

  def text(document)
    return process(document, :text)
  end

  private

  def process(document, method)
    return document.css(@css_selectors.join(", ")).map(&method).join("\n")
  end
end

def parse_options(argv)
  argv = argv.dup
  fetcher = :raw
  headers = {}
  css_selectors = []
  output_method_name = :raw

  parser = OptionParser.new
  parser.version = Webg::VERSION
  parser.banner = "Usage: #{File.basename(Process.argv0)} [options] uri"
  parser.separator("")
  parser.separator("Options:")
  parser.on(
    "--firefox",
    "use Firefox to fetch web page. slow, but JavaScript-evaluatable",
  ) do
    fetcher = :firefox
  end
  parser.on(
    "--user-agent=USER-AGENT",
    "specify User-Agent header",
  ) do |ua|
    headers["User-Agent"] = ua
  end
  parser.on(
    "--referer=REFERER",
    "specify Referer header",
  ) do |referer|
    headers["Referer"] = referer
  end
  parser.on(
    "--header=HEADER-LINE",
    "specify various headers in HTTP request. e.g: --header='Accept-Language: ja'"
  ) do |header_line|
    md = /:\s+/.match(header_line)
    raise "cannot parse header-line(#{header_line})" if !md
    headers[md.pre_match] = md.post_match
  end
  parser.on(
    "--css-selector=SELECTOR",
    "specify css selector to filter output.",
  ) do |selector|
    css_selectors << selector
  end
  parser.on(
    "--text",
    "output only text",
  ) do
    output_method_name = :text
  end
  parser.on(
    "--squeezed-text",
    "output text with squeezing white spaces",
  ) do
    output_method_name = :squeezed_text
  end
  parser.parse!(argv)

  uri = argv.shift
  if !uri
    $stderr.puts(parser.help)
    exit(1)
  end
  uri = URI(uri)

  return uri, fetcher, headers, css_selectors, output_method_name
end

begin
  uri, fetcher_name, headers, css_selectors, output_method_name = parse_options(ARGV)

  fetcher = Fetcher.const_get(fetcher_name.capitalize).new(headers)
  selector = css_selectors.empty? ? Selector::All.new : Selector::Css.new(css_selectors)

  document = Nokogiri::HTML.parse(fetcher.(uri))
  puts(selector.public_send(output_method_name, document))
rescue => e
  $stderr.puts(e.message)
  exit(1)
end
